Scheduler - Shortest job-time first

i)
Find the process with shortest job-time. 
Run the selected process until job is complete.
Repeat until all processes have been completed.

ii)
Strong when the number of processes completed is the most important metric.
Processes will be completed sooner, as high job-time processes don't use time that could be spent on processes with lower job-times. 

iii)
Weak in situations where processes need to be completed soon after arrival.
This is because starvation of processes with large job-times can occur if processes with shorter job-times keep arriving and being executed with preference.

-----------------------------------------------------------------------------------------------------------------------------------------------------
Memory manager - Evict from most recently used process first

i) 
Load MIN(free memory, memory requirement) to selected process. 
If the process doesn't have MIN(16KB, memory requirement) memory available, swap memory from the most recently used process until it does.

ii) 
This is the optimal management algorithm for round-robin scheduling, as the pages of the most recently used process are always furthest away from their next use.

iii) 
If the amount of available memory for the simulation is low enough that the cost of page faults > quantum, the process will never finish, as it's job time will continually increase.  
